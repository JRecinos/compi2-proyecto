/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import { AstNode } from "./ast/ast-node.js";
export var Root = null;

var code3d = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,20],$V2=[1,18],$V3=[1,17],$V4=[1,19],$V5=[1,14],$V6=[1,23],$V7=[1,13],$V8=[1,15],$V9=[1,25],$Va=[1,21],$Vb=[1,22],$Vc=[5,16,17,19,21,24,26,27,29,40,45,52,54,56],$Vd=[1,58],$Ve=[1,59],$Vf=[1,60],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[5,16,17,19,21,24,25,26,27,29,40,45,52,54,56],$Vk=[1,79],$Vl=[1,80],$Vm=[1,81],$Vn=[1,82],$Vo=[1,83],$Vp=[26,32],$Vq=[17,19,26,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"STMT_LIST":4,"EOF":5,"STMT":6,"CALL_STMT":7,"TMP_STMT":8,"JMP_STMT":9,"HEAP_STMT":10,"STACK_STMT":11,"PRINT_STMT":12,"METHOD_DECL_STMT":13,"LABEL_STMT":14,"DECL_STMT":15,"var":16,"sp":17,"E":18,"hp":19,"TMP_LIST":20,"heap":21,"squarel":22,"squarer":23,"stack":24,"comma":25,"tmp":26,"label":27,"colon":28,"call":29,"identifier":30,"eq":31,"number":32,"OPERATOR":33,"ERROR_ASSIGN":34,"plus":35,"min":36,"div":37,"mod":38,"mult":39,"goto":40,"IFINIT":41,"lpar":42,"GOTO_OP":43,"rpar":44,"if":45,"gotoeq":46,"gotoneq":47,"gotogt":48,"gotogte":49,"gotolt":50,"gotolte":51,"print":52,"parameter":53,"proc":54,"begin":55,"end":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"var",17:"sp",18:"E",19:"hp",21:"heap",22:"squarel",23:"squarer",24:"stack",25:"comma",26:"tmp",27:"label",28:"colon",29:"call",30:"identifier",31:"eq",32:"number",35:"plus",36:"min",37:"div",38:"mod",39:"mult",40:"goto",42:"lpar",44:"rpar",45:"if",46:"gotoeq",47:"gotoneq",48:"gotogt",49:"gotogte",50:"gotolt",51:"gotolte",52:"print",53:"parameter",54:"proc",55:"begin",56:"end"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,2],[15,2],[15,2],[15,2],[15,4],[15,4],[20,3],[20,1],[14,3],[14,2],[7,2],[8,3],[8,3],[8,3],[8,3],[8,6],[8,6],[8,6],[8,6],[8,6],[8,6],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[34,3],[33,1],[33,1],[33,1],[33,1],[33,1],[10,6],[10,6],[10,6],[10,6],[10,6],[10,6],[10,6],[10,6],[10,5],[10,5],[11,6],[11,6],[11,6],[11,6],[11,6],[11,6],[11,6],[11,6],[11,5],[11,5],[11,5],[11,5],[9,2],[9,8],[9,6],[9,8],[9,6],[9,8],[9,6],[9,8],[9,6],[41,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[12,6],[12,6],[13,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			Root = $$[$0-1];
            this.$ = $$[$0-1];

break;
case 2:

			$$[$0-1].setNext($$[$0]);

break;
case 3:

			this.$ = $$[$0];

break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 43: case 44: case 45: case 46: case 47: case 80: case 81: case 82: case 83: case 84: case 85:

		this.$ = $$[$0];

break;
case 13:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
						);

break;
case 14:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("e", null, _$[$0].first_line,_$[$0].first_column)
						);

break;
case 15:

			this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
					);

break;
case 16:

		this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column);
		$$[$0].forEach(el=>this.$.addChild(el));

break;
case 17:

			this.$ = new AstNode("var",null, _$[$0-3].first_line,_$[$0-3].first_column,
					new AstNode("heap",null,_$[$0-2].first_line, _$[$0-2].first_column)
				);

break;
case 18:

			this.$ = new AstNode("var",null, _$[$0-1].first_line,_$[$0-1].first_column,
				new AstNode("stack",null,_$[$0-2].first_line, _$[$0-2].first_column)
			);

break;
case 19:

		this.$ = $$[$0-2];
		this.$.push(new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column));

break;
case 20:

		this.$ = [
			new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
		]

break;
case 21:

		$$[$0-2].next = new AstNode("label",$$[$0],_$[$0].first_line, _$[$0].first_column);
		this.$ = $$[$0-2];

break;
case 22:

		this.$ = new AstNode("label", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);

break;
case 23:

		this.$ = new AstNode("call", $$[$0], _$[$0-1].first_line, _$[$0-1].first_column );

break;
case 24:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
						);

break;
case 25:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
						);

break;
case 26:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
						);

break;
case 27:

		this.$ = new AstNode("=",null, _$[$0-1].first_line,_$[$0-1].first_column,
						new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
						new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
						);

break;
case 28:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 29:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 30:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("stack",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 31:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("number",parseFloat($$[$0-1]),_$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 32:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 33:

		this.$ = new AstNode("=", null, _$[$0-4].first_line,_$[$0-4].first_column,
					new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
					new AstNode("heap",null,_$[$0-3].first_line, _$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-1].first_line, _$[$0-1].first_column)
					)
				);


break;
case 34:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 35:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 36:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 37:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("tmp", $$[$0-2], _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column),
							)
						);

break;
case 38:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 39:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("sp", null, _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 40:

		this.$ = new AstNode("=",null, _$[$0-4].first_line,_$[$0-4].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 41:

		this.$ = new AstNode("=",null, _$[$0-4].first_line,_$[$0-4].first_column,
						new AstNode("tmp", $$[$0-4], _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("hp", null, _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 42:

	this.$ = new AstNode("=",null,_$[$0-1].first_line,_$[$0-1].first_column,
				new AstNode("E",null, _$[$0-2].first_line,_$[$0-2].first_column),
				new AstNode("number", parseFloat(number), _$[$0].first_line, _$[$0].first_column)
			)

break;
case 48:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);

break;
case 49:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column)
				);

break;
case 50:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);

break;
case 51:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);

break;
case 52:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp",null, _$[$0].first_line, _$[$0].first_column)
				);

break;
case 53:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);

break;
case 54:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);

break;
case 55:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("heap",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("hp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null, _$[$0].first_line, _$[$0].first_column)
				);

break;
case 56:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 57:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("hp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 58:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number",parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);


break;
case 59:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0], _$[$0].first_line, _$[$0].first_column)
				);

break;
case 60:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("tmp", $$[$0],_$[$0].first_line, _$[$0].first_column)
				);

break;
case 61:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("number", parseFloat($$[$0]),_$[$0].first_line, _$[$0].first_column)
				);

break;
case 62:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp",null,_$[$0].first_line, _$[$0].first_column)
				);


break;
case 63:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("tmp",$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null, _$[$0].first_line, _$[$0].first_column)
				);

break;
case 64:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("sp", null ,_$[$0].first_line, _$[$0].first_column)
				);

break;
case 65:

		this.$ = new AstNode("=", null, _$[$0-1].first_line,_$[$0-1].first_column,
					new AstNode("stack",null,_$[$0-5].first_line, _$[$0-5].first_column,
						new AstNode("sp",null,_$[$0-3].first_line, _$[$0-3].first_column)
					),
					new AstNode("hp", null,_$[$0].first_line, _$[$0].first_column)
				);

break;
case 66:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
							new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
							new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
								new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
								new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 67:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,
							new AstNode("hp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 68:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("number", parseFloat($$[$0]), _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 69:

		this.$ = new AstNode("=",null, _$[$0-3].first_line,_$[$0-3].first_column,
						new AstNode("sp", null, _$[$0-4].first_line,_$[$0-4].first_column),
						new AstNode($$[$0-1], null, _$[$0-1].first_line,_$[$0-1].first_column,
							new AstNode("sp", null, _$[$0-2].first_line,_$[$0-2].first_column),
							new AstNode("tmp", $$[$0], _$[$0].first_line,_$[$0].first_column)
							)
						);

break;
case 70:

		this.$ = new AstNode($$[$0-1],
						 $$[$0],
						 _$[$0-1].first_line,
						 _$[$0-1].first_column);


break;
case 71:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("number",parseFloat($$[$0-5]), _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("tmp", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()

break;
case 72:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("number",parseFloat($$[$0-4]), _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("tmp", $$[$0-2], _$[$0-1].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()

break;
case 73:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()

break;
case 74:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("tmp",$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()

break;
case 75:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("tmp",$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("tmp", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()

break;
case 76:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("tmp",$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("tmp", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()

break;
case 77:

		this.$ = new AstNode($$[$0-4],
						 $$[$0],
						 _$[$0-7].first_line,
						 _$[$0-7].first_column,
						 new AstNode("number", parseFloat($$[$0-5]), _$[$0-5].first_line, _$[$0-5].first_column),
						 new AstNode("number", parseFloat($$[$0-3]), _$[$0-3].first_line, _$[$0-3].first_column)
						);
		if($$[$0-7] === true) this.$.converToFalse()

break;
case 78:

		this.$ = new AstNode($$[$0-3],
						 $$[$0],
						 _$[$0-5].first_line,
						 _$[$0-5].first_column,
						 new AstNode("number", parseFloat($$[$0-4]), _$[$0-4].first_line, _$[$0-4].first_column),
						 new AstNode("number", parseFloat($$[$0-2]), _$[$0-2].first_line, _$[$0-2].first_column)
						);
		if($$[$0-5] === true) this.$.converToFalse()

break;
case 79:

		this.$ = false

break;
case 86:

		this.$ = new AstNode($$[$0-5], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,
				new AstNode("tmp", $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
			);

break;
case 87:

		this.$ = new AstNode($$[$0-5], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,
				new AstNode("number", parseFloat($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column)
			);

break;
case 88:

		let begin_node = new AstNode("begin",null,_$[$0-2].first_line, _$[$0-2].first_column);
		begin_node.setNext($$[$0-1]);
		begin_node.setNext(new AstNode("end",null,_$[$0].first_line, _$[$0].first_column));
		this.$ = new AstNode("method", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, begin_node);

break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,19:$V2,21:$V3,24:$V4,26:$V5,27:$V6,29:$V7,40:$V8,41:16,45:$V9,52:$Va,54:$Vb},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,19:$V2,21:$V3,24:$V4,26:$V5,27:$V6,29:$V7,40:$V8,41:16,45:$V9,52:$Va,54:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{30:[1,28]},{31:[1,29]},{27:[1,30]},{26:[1,33],32:[1,32],42:[1,31]},{22:[1,34]},{31:[1,35]},{22:[1,36]},{31:[1,37]},{42:[1,38]},{30:[1,39]},{25:[1,40],28:[1,41]},{17:[1,42],18:[1,43],19:[1,44],20:45,21:[1,46],24:[1,47],26:[1,48]},o([26,32,42],[2,79]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,23]),{17:[1,51],19:[1,52],21:[1,54],24:[1,53],26:[1,49],32:[1,50]},o($Vc,[2,70]),{26:[1,56],32:[1,55]},{43:57,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{43:64,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{19:[1,66],26:[1,65]},{19:[1,67]},{17:[1,69],26:[1,68]},{17:[1,71],19:[1,70]},{53:[1,72]},{55:[1,73]},{14:74,27:$V6},o($Vc,[2,22]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16],{25:[1,75]}),{22:[1,76]},{22:[1,77]},o($Vj,[2,20]),o($Vc,[2,24],{33:78,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo}),o($Vc,[2,25],{33:84,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo}),o($Vc,[2,26],{33:85,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo}),o($Vc,[2,27],{33:86,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo}),{22:[1,87]},{22:[1,88]},{43:89,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{43:90,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{26:[1,91],32:[1,92]},o($Vp,[2,80]),o($Vp,[2,81]),o($Vp,[2,82]),o($Vp,[2,83]),o($Vp,[2,84]),o($Vp,[2,85]),{26:[1,94],32:[1,93]},{23:[1,95]},{23:[1,96]},{33:97,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo},{23:[1,98]},{23:[1,99]},{33:100,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo},{33:101,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo},{25:[1,102]},{4:103,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,19:$V2,21:$V3,24:$V4,26:$V5,27:$V6,29:$V7,40:$V8,41:16,45:$V9,52:$Va,54:$Vb},o($Vc,[2,21]),{26:[1,104]},{23:[1,105]},{23:[1,106]},{26:[1,107],32:[1,108]},o($Vq,[2,43]),o($Vq,[2,44]),o($Vq,[2,45]),o($Vq,[2,46]),o($Vq,[2,47]),{17:[1,111],19:[1,112],26:[1,110],32:[1,109]},{32:[1,113]},{32:[1,114]},{17:[1,117],26:[1,116],32:[1,115]},{19:[1,120],26:[1,119],32:[1,118]},{26:[1,121],32:[1,122]},{26:[1,124],32:[1,123]},{40:[1,125]},{40:[1,126]},{40:[1,127]},{40:[1,128]},{31:[1,129]},{31:[1,130]},{26:[1,132],32:[1,131]},{31:[1,133]},{31:[1,134]},{26:[1,136],32:[1,135]},{26:[1,138],32:[1,137]},{26:[1,139],32:[1,140]},{6:27,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,19:$V2,21:$V3,24:$V4,26:$V5,27:$V6,29:$V7,40:$V8,41:16,45:$V9,52:$Va,54:$Vb,56:[1,141]},o($Vj,[2,19]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,36]),o($Vc,[2,37]),o($Vc,[2,34]),o($Vc,[2,35]),o($Vc,[2,39]),o($Vc,[2,41]),o($Vc,[2,38]),o($Vc,[2,40]),{23:[1,142]},{23:[1,143]},{23:[1,144]},{23:[1,145]},{23:[1,146]},{23:[1,147]},{44:[1,148]},{44:[1,149]},{44:[1,150]},{44:[1,151]},{27:[1,152]},{27:[1,153]},{27:[1,154]},{27:[1,155]},{17:[1,159],19:[1,158],26:[1,157],32:[1,156]},{17:[1,163],19:[1,162],26:[1,161],32:[1,160]},o($Vc,[2,56]),o($Vc,[2,57]),{17:[1,166],19:[1,167],26:[1,165],32:[1,164]},{17:[1,170],19:[1,171],26:[1,168],32:[1,169]},o($Vc,[2,66]),o($Vc,[2,67]),o($Vc,[2,68]),o($Vc,[2,69]),{44:[1,172]},{44:[1,173]},o($Vc,[2,88]),o($Vc,[2,28]),o($Vc,[2,29]),o($Vc,[2,30]),o($Vc,[2,31]),o($Vc,[2,32]),o($Vc,[2,33]),{40:[1,174]},{40:[1,175]},{40:[1,176]},{40:[1,177]},o($Vc,[2,72]),o($Vc,[2,78]),o($Vc,[2,74]),o($Vc,[2,76]),o($Vc,[2,48]),o($Vc,[2,50]),o($Vc,[2,52]),o($Vc,[2,54]),o($Vc,[2,49]),o($Vc,[2,51]),o($Vc,[2,53]),o($Vc,[2,55]),o($Vc,[2,58]),o($Vc,[2,59]),o($Vc,[2,62]),o($Vc,[2,63]),o($Vc,[2,60]),o($Vc,[2,61]),o($Vc,[2,64]),o($Vc,[2,65]),o($Vc,[2,86]),o($Vc,[2,87]),{27:[1,178]},{27:[1,179]},{27:[1,180]},{27:[1,181]},o($Vc,[2,71]),o($Vc,[2,77]),o($Vc,[2,73]),o($Vc,[2,75])],
defaultActions: {26:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */;
break;
case 1:return 16;
break;
case 2:return 18
break;
case 3:return 27;
break;
case 4:return 26;
break;
case 5:return 32
break;
case 6:return 29;
break;
case 7:return 19;
break;
case 8:return 17;
break;
case 9:return 21;
break;
case 10:return 24;
break;
case 11:return 45;
break;
case 12:return 31;
break;
case 13:return 25;
break;
case 14:return "plus";
break;
case 15:return "min";
break;
case 16:return "div";
break;
case 17:return "parameter";
break;
case 18:return "parameter";
break;
case 19:return "parameter";
break;
case 20:return "mod";
break;
case 21:return "mult";
break;
case 22:return "goto";
break;
case 23:return 54
break;
case 24:return "gotoeq";
break;
case 25:return "gotoneq";
break;
case 26:return "gotogt";
break;
case 27:return "gotolt";
break;
case 28:return "gotogte";
break;
case 29:return "gotolte";
break;
case 30:return "begin";
break;
case 31:return "end";
break;
case 32:return "squarel";
break;
case 33:return "squarer";
break;
case 34:return "print";
break;
case 35:return 42;
break;
case 36:return 44;
break;
case 37:return 28;
break;
case 38:return 30;
break;
case 39:/comentario lineal/
break;
case 40:/comentario lineal/
break;
case 41:return 'invalid';
break;
case 42:return 5;
break;
case 43:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:var)/i,/^(?:E)/i,/^(?:[l][0-9]+)/i,/^(?:[t][0-9]+)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:call)/i,/^(?:H)/i,/^(?:P)/i,/^(?:Heap)/i,/^(?:Stack)/i,/^(?:if)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:"%c")/i,/^(?:"%i")/i,/^(?:"%d")/i,/^(?:%)/i,/^(?:\*)/i,/^(?:goto)/i,/^(?:proc)/i,/^(?:==)/i,/^(?:<>)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:begin)/i,/^(?:end)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:print)/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:[_A-Za-z][_A-Za-z0-9]*)/i,/^(?:;[^\n]*)/i,/^(?:##[^\n]*)/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = code3d;
exports.Parser = code3d.Parser;
exports.parse = function () { return code3d.parse.apply(code3d, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export { code3d }